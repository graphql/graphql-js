{"version":3,"file":"Path.js","sourceRoot":"","sources":["../../src/jsutils/Path.ts"],"names":[],"mappings":";;AAWA,0BAMC;AAKD,kCAUC;AAxBD;;GAEG;AACH,SAAgB,OAAO,CACrB,IAAgC,EAChC,GAAoB,EACpB,QAA4B;IAE5B,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,SAAgB,WAAW,CACzB,IAA2B;IAE3B,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,IAAI,IAAI,GAAG,IAAI,CAAC;IAChB,OAAO,IAAI,EAAE,CAAC;QACZ,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACD,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;AAC7B,CAAC","sourcesContent":["import type { Maybe } from './Maybe.js';\n\nexport interface Path {\n  readonly prev: Path | undefined;\n  readonly key: string | number;\n  readonly typename: string | undefined;\n}\n\n/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(\n  prev: Readonly<Path> | undefined,\n  key: string | number,\n  typename: string | undefined,\n): Path {\n  return { prev, key, typename };\n}\n\n/**\n * Given a Path, return an Array of the path keys.\n */\nexport function pathToArray(\n  path: Maybe<Readonly<Path>>,\n): Array<string | number> {\n  const flattened = [];\n  let curr = path;\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n"]}