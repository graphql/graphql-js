{"version":3,"file":"toError.js","sourceRoot":"","sources":["../../src/jsutils/toError.ts"],"names":[],"mappings":";;AAKA,0BAIC;AATD,6CAAuC;AAEvC;;GAEG;AACH,SAAgB,OAAO,CAAC,WAAoB;IAC1C,OAAO,WAAW,YAAY,KAAK;QACjC,CAAC,CAAC,WAAW;QACb,CAAC,CAAC,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,cAAe,SAAQ,KAAK;IAGhC,YAAY,WAAoB;QAC9B,KAAK,CAAC,0BAA0B,GAAG,IAAA,oBAAO,EAAC,WAAW,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;CACF","sourcesContent":["import { inspect } from './inspect.js';\n\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\nexport function toError(thrownValue: unknown): Error {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  thrownValue: unknown;\n\n  constructor(thrownValue: unknown) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n"]}