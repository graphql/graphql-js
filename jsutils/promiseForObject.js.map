{"version":3,"file":"promiseForObject.js","sourceRoot":"","sources":["../../src/jsutils/promiseForObject.ts"],"names":[],"mappings":";;AASA,4CAaC;AApBD;;;;;;GAMG;AACI,KAAK,UAAU,gBAAgB,CACpC,MAA0B,EAC1B,QAAkC;IAElC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAErC,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACjD,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;QACrC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,OAAO,QAAQ,CAAC,cAAc,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import type { ObjMap } from './ObjMap.js';\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport async function promiseForObject<T, U>(\n  object: ObjMap<Promise<T>>,\n  callback: (object: ObjMap<T>) => U,\n): Promise<U> {\n  const keys = Object.keys(object);\n  const values = Object.values(object);\n\n  const resolvedValues = await Promise.all(values);\n  const resolvedObject = Object.create(null);\n  for (let i = 0; i < keys.length; ++i) {\n    resolvedObject[keys[i]] = resolvedValues[i];\n  }\n  return callback(resolvedObject);\n}\n"]}