{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../src/validation/validate.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Maybe } from '../jsutils/Maybe.js';\n\nimport { GraphQLError } from '../error/GraphQLError.js';\n\nimport type { DocumentNode } from '../language/ast.js';\nimport { visit, visitInParallel } from '../language/visitor.js';\n\nimport type { GraphQLSchema } from '../type/schema.js';\nimport { assertValidSchema } from '../type/validate.js';\n\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.js';\n\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules.js';\nimport type { SDLValidationRule, ValidationRule } from './ValidationContext.js';\nimport {\n  SDLValidationContext,\n  ValidationContext,\n} from './ValidationContext.js';\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\nexport function validate(\n  schema: GraphQLSchema,\n  documentAST: DocumentNode,\n  rules: ReadonlyArray<ValidationRule> = specifiedRules,\n  options?: { maxErrors?: number; hideSuggestions?: Maybe<boolean> },\n): ReadonlyArray<GraphQLError> {\n  const maxErrors = options?.maxErrors ?? 100;\n  const hideSuggestions = options?.hideSuggestions ?? false;\n\n  // If the schema used for validation is invalid, throw an error.\n  assertValidSchema(schema);\n\n  const abortError = new GraphQLError(\n    'Too many validation errors, error limit reached. Validation aborted.',\n  );\n  const errors: Array<GraphQLError> = [];\n  const typeInfo = new TypeInfo(schema);\n  const context = new ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        throw abortError;\n      }\n      errors.push(error);\n    },\n    hideSuggestions,\n  );\n\n  // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n  const visitor = visitInParallel(rules.map((rule) => rule(context)));\n\n  // Visit the whole document with each instance of all provided rules.\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e: unknown) {\n    if (e === abortError) {\n      errors.push(abortError);\n    } else {\n      throw e;\n    }\n  }\n  return errors;\n}\n\n/**\n * @internal\n */\nexport function validateSDL(\n  documentAST: DocumentNode,\n  schemaToExtend?: Maybe<GraphQLSchema>,\n  rules: ReadonlyArray<SDLValidationRule> = specifiedSDLRules,\n): ReadonlyArray<GraphQLError> {\n  const errors: Array<GraphQLError> = [];\n  const context = new SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n\n  const visitors = rules.map((rule) => rule(context));\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\nexport function assertValidSDL(documentAST: DocumentNode): void {\n  const errors = validateSDL(documentAST);\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\nexport function assertValidSDLExtension(\n  documentAST: DocumentNode,\n  schema: GraphQLSchema,\n): void {\n  const errors = validateSDL(documentAST, schema);\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n"]}