{"version":3,"file":"ValuesOfCorrectTypeRule.js","sourceRoot":"","sources":["../../../src/validation/rules/ValuesOfCorrectTypeRule.ts"],"names":[],"mappings":";;AAmBA,0DAsBC;AAlCD,iFAA6E;AAI7E;;;;;;;GAOG;AACH,SAAgB,uBAAuB,CACrC,OAA0B;IAE1B,OAAO;QACL,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE,CAClB,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;QACzD,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;QAClB,uEAAuE;QACvE,8CAA8C;QAC9C,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,kBAAkB,EAAE,CAAC;QAC/D,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE,CACpB,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;QACzD,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE,CAClB,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;QACzD,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;QAC3E,UAAU,EAAE,CAAC,IAAI,EAAE,EAAE,CACnB,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;QACzD,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE,CACpB,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;QACzD,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE,CACrB,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;KAC1D,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAS,gBAAgB,CACvB,OAA0B,EAC1B,IAAe,EACf,SAAkC;IAElC,IAAI,SAAS,EAAE,CAAC;QACd,IAAA,4CAAoB,EAClB,IAAI,EACJ,SAAS,EACT,CAAC,KAAK,EAAE,EAAE;YACR,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC,EACD,SAAS,EACT,SAAS,EACT,OAAO,CAAC,eAAe,CACxB,CAAC;IACJ,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import type { Maybe } from '../../jsutils/Maybe.js';\n\nimport type { ValueNode } from '../../language/ast.js';\nimport type { ASTVisitor } from '../../language/visitor.js';\n\nimport type { GraphQLInputType } from '../../type/index.js';\n\nimport { validateInputLiteral } from '../../utilities/validateInputValue.js';\n\nimport type { ValidationContext } from '../ValidationContext.js';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(\n  context: ValidationContext,\n): ASTVisitor {\n  return {\n    NullValue: (node) =>\n      isValidValueNode(context, node, context.getInputType()),\n    ListValue: (node) =>\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      isValidValueNode(context, node, context.getParentInputType()),\n    ObjectValue: (node) =>\n      isValidValueNode(context, node, context.getInputType()),\n    EnumValue: (node) =>\n      isValidValueNode(context, node, context.getInputType()),\n    IntValue: (node) => isValidValueNode(context, node, context.getInputType()),\n    FloatValue: (node) =>\n      isValidValueNode(context, node, context.getInputType()),\n    StringValue: (node) =>\n      isValidValueNode(context, node, context.getInputType()),\n    BooleanValue: (node) =>\n      isValidValueNode(context, node, context.getInputType()),\n  };\n}\n\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\nfunction isValidValueNode(\n  context: ValidationContext,\n  node: ValueNode,\n  inputType: Maybe<GraphQLInputType>,\n): false {\n  if (inputType) {\n    validateInputLiteral(\n      node,\n      inputType,\n      (error) => {\n        context.reportError(error);\n      },\n      undefined,\n      undefined,\n      context.hideSuggestions,\n    );\n  }\n  return false;\n}\n"]}