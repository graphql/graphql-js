{"version":3,"file":"DeferStreamDirectiveOnValidOperationsRule.js","sourceRoot":"","sources":["../../../src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts"],"names":[],"mappings":";;AAkCA,8FA+CC;AAjFD,iEAA2D;AAG3D,kDAA0D;AAC1D,sDAA+C;AAG/C,4DAGkC;AAIlC,SAAS,oBAAoB,CAAC,IAAmB;IAC/C,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;IAC1E,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,eAAI,CAAC,OAAO,EAAE,CAAC;QAC3C,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;SAAM,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,eAAI,CAAC,QAAQ,EAAE,CAAC;QACnD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;GAIG;AACH,SAAgB,yCAAyC,CACvD,OAA0B;IAE1B,MAAM,4BAA4B,GAAG,IAAI,GAAG,EAAU,CAAC;IAEvD,OAAO;QACL,mBAAmB,CAAC,SAAS;YAC3B,IAAI,SAAS,CAAC,SAAS,KAAK,0BAAiB,CAAC,YAAY,EAAE,CAAC;gBAC3D,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAC,iCAAiC,CAC9D,SAAS,CACV,EAAE,CAAC;oBACF,4BAA4B,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACxD,CAAC;YACH,CAAC;QACH,CAAC;QACD,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS;YAC7C,MAAM,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAEpC,IACE,MAAM,IAAI,cAAc;gBACxB,CAAC,CAAC,cAAc,CAAC,IAAI,KAAK,eAAI,CAAC,mBAAmB;oBAChD,4BAA4B,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC5D,CAAC,cAAc,CAAC,IAAI,KAAK,eAAI,CAAC,oBAAoB;wBAChD,cAAc,CAAC,SAAS,KAAK,0BAAiB,CAAC,YAAY,CAAC,CAAC,EACjE,CAAC;gBACD,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,qCAAqB,CAAC,IAAI,EAAE,CAAC;oBACnD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChC,OAAO,CAAC,WAAW,CACjB,IAAI,8BAAY,CACd,qHAAqH,EACrH,EAAE,KAAK,EAAE,IAAI,EAAE,CAChB,CACF,CAAC;oBACJ,CAAC;gBACH,CAAC;qBAAM,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,sCAAsB,CAAC,IAAI,EAAE,CAAC;oBAC3D,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChC,OAAO,CAAC,WAAW,CACjB,IAAI,8BAAY,CACd,uHAAuH,EACvH,EAAE,KAAK,EAAE,IAAI,EAAE,CAChB,CACF,CAAC;oBACJ,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.js';\n\nimport type { DirectiveNode } from '../../language/ast.js';\nimport { OperationTypeNode } from '../../language/ast.js';\nimport { Kind } from '../../language/kinds.js';\nimport type { ASTVisitor } from '../../language/visitor.js';\n\nimport {\n  GraphQLDeferDirective,\n  GraphQLStreamDirective,\n} from '../../type/directives.js';\n\nimport type { ValidationContext } from '../ValidationContext.js';\n\nfunction ifArgumentCanBeFalse(node: DirectiveNode): boolean {\n  const ifArgument = node.arguments?.find((arg) => arg.name.value === 'if');\n  if (!ifArgument) {\n    return false;\n  }\n  if (ifArgument.value.kind === Kind.BOOLEAN) {\n    if (ifArgument.value.value) {\n      return false;\n    }\n  } else if (ifArgument.value.kind !== Kind.VARIABLE) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Defer And Stream Directives Are Used On Valid Operations\n *\n * A GraphQL document is only valid if defer directives are not used on root mutation or subscription types.\n */\nexport function DeferStreamDirectiveOnValidOperationsRule(\n  context: ValidationContext,\n): ASTVisitor {\n  const fragmentsUsedOnSubscriptions = new Set<string>();\n\n  return {\n    OperationDefinition(operation) {\n      if (operation.operation === OperationTypeNode.SUBSCRIPTION) {\n        for (const fragment of context.getRecursivelyReferencedFragments(\n          operation,\n        )) {\n          fragmentsUsedOnSubscriptions.add(fragment.name.value);\n        }\n      }\n    },\n    Directive(node, _key, _parent, _path, ancestors) {\n      const definitionNode = ancestors[2];\n\n      if (\n        'kind' in definitionNode &&\n        ((definitionNode.kind === Kind.FRAGMENT_DEFINITION &&\n          fragmentsUsedOnSubscriptions.has(definitionNode.name.value)) ||\n          (definitionNode.kind === Kind.OPERATION_DEFINITION &&\n            definitionNode.operation === OperationTypeNode.SUBSCRIPTION))\n      ) {\n        if (node.name.value === GraphQLDeferDirective.name) {\n          if (!ifArgumentCanBeFalse(node)) {\n            context.reportError(\n              new GraphQLError(\n                'Defer directive not supported on subscription operations. Disable `@defer` by setting the `if` argument to `false`.',\n                { nodes: node },\n              ),\n            );\n          }\n        } else if (node.name.value === GraphQLStreamDirective.name) {\n          if (!ifArgumentCanBeFalse(node)) {\n            context.reportError(\n              new GraphQLError(\n                'Stream directive not supported on subscription operations. Disable `@stream` by setting the `if` argument to `false`.',\n                { nodes: node },\n              ),\n            );\n          }\n        }\n      }\n    },\n  };\n}\n"]}