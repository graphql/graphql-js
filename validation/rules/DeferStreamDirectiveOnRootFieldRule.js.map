{"version":3,"file":"DeferStreamDirectiveOnRootFieldRule.js","sourceRoot":"","sources":["../../../src/validation/rules/DeferStreamDirectiveOnRootFieldRule.ts"],"names":[],"mappings":";;AAgBA,kFA8CC;AA9DD,iEAA2D;AAI3D,4DAGkC;AAIlC;;;;GAIG;AACH,SAAgB,mCAAmC,CACjD,OAA0B;IAE1B,OAAO;QACL,SAAS,CAAC,IAAI;YACZ,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE,CAAC;YAC3D,MAAM,gBAAgB,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC,mBAAmB,EAAE,CAAC;YACnE,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;YAC3C,IAAI,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,qCAAqB,CAAC,IAAI,EAAE,CAAC;gBACjE,IAAI,YAAY,IAAI,UAAU,KAAK,YAAY,EAAE,CAAC;oBAChD,OAAO,CAAC,WAAW,CACjB,IAAI,8BAAY,CACd,yDAAyD,UAAU,IAAI,EACvE,EAAE,KAAK,EAAE,IAAI,EAAE,CAChB,CACF,CAAC;gBACJ,CAAC;gBACD,IAAI,gBAAgB,IAAI,UAAU,KAAK,gBAAgB,EAAE,CAAC;oBACxD,OAAO,CAAC,WAAW,CACjB,IAAI,8BAAY,CACd,6DAA6D,UAAU,IAAI,EAC3E,EAAE,KAAK,EAAE,IAAI,EAAE,CAChB,CACF,CAAC;gBACJ,CAAC;YACH,CAAC;YACD,IAAI,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,sCAAsB,CAAC,IAAI,EAAE,CAAC;gBAClE,IAAI,YAAY,IAAI,UAAU,KAAK,YAAY,EAAE,CAAC;oBAChD,OAAO,CAAC,WAAW,CACjB,IAAI,8BAAY,CACd,0DAA0D,UAAU,IAAI,EACxE,EAAE,KAAK,EAAE,IAAI,EAAE,CAChB,CACF,CAAC;gBACJ,CAAC;gBACD,IAAI,gBAAgB,IAAI,UAAU,KAAK,gBAAgB,EAAE,CAAC;oBACxD,OAAO,CAAC,WAAW,CACjB,IAAI,8BAAY,CACd,8DAA8D,UAAU,IAAI,EAC5E,EAAE,KAAK,EAAE,IAAI,EAAE,CAChB,CACF,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.js';\n\nimport type { ASTVisitor } from '../../language/visitor.js';\n\nimport {\n  GraphQLDeferDirective,\n  GraphQLStreamDirective,\n} from '../../type/directives.js';\n\nimport type { ValidationContext } from '../ValidationContext.js';\n\n/**\n * Defer and stream directives are used on valid root field\n *\n * A GraphQL document is only valid if defer directives are not used on root mutation or subscription types.\n */\nexport function DeferStreamDirectiveOnRootFieldRule(\n  context: ValidationContext,\n): ASTVisitor {\n  return {\n    Directive(node) {\n      const mutationType = context.getSchema().getMutationType();\n      const subscriptionType = context.getSchema().getSubscriptionType();\n      const parentType = context.getParentType();\n      if (parentType && node.name.value === GraphQLDeferDirective.name) {\n        if (mutationType && parentType === mutationType) {\n          context.reportError(\n            new GraphQLError(\n              `Defer directive cannot be used on root mutation type \"${parentType}\".`,\n              { nodes: node },\n            ),\n          );\n        }\n        if (subscriptionType && parentType === subscriptionType) {\n          context.reportError(\n            new GraphQLError(\n              `Defer directive cannot be used on root subscription type \"${parentType}\".`,\n              { nodes: node },\n            ),\n          );\n        }\n      }\n      if (parentType && node.name.value === GraphQLStreamDirective.name) {\n        if (mutationType && parentType === mutationType) {\n          context.reportError(\n            new GraphQLError(\n              `Stream directive cannot be used on root mutation type \"${parentType}\".`,\n              { nodes: node },\n            ),\n          );\n        }\n        if (subscriptionType && parentType === subscriptionType) {\n          context.reportError(\n            new GraphQLError(\n              `Stream directive cannot be used on root subscription type \"${parentType}\".`,\n              { nodes: node },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n"]}