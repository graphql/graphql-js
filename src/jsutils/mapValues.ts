import type { ObjMap, ReadOnlyObjMap } from './ObjMap';

/**
 * Creates an object map from an array of `maps` with the same keys as each `map`
 * in `maps` and values generated by running each value of `map` thru `fn`.
 */
export function mapValues<T, V>(
  maps: ReadonlyArray<ReadOnlyObjMap<T>>,
  fn: (value: T, key: string) => V,
): ObjMap<V> {
  const result = Object.create(null);

  for (const map of maps) {
    for (const key of Object.keys(map)) {
      result[key] = fn(map[key], key);
    }
  }
  return result;
}
