// @flow
import { GraphQLError } from '../error/GraphQLError';

import type { DocumentNode } from '../language/ast';

import type { GraphQLSchema } from '../type/schema';

import { TypeInfo } from '../utilities/TypeInfo';

import type { SDLValidationRule, ValidationRule } from './ValidationContext';
import { specifiedRules, specifiedSDLRules } from './specifiedRules';

/**
 * Implements the "Validation" section of the spec.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the document is valid.
 *
 * A list of specific validation rules may be provided. If not provided, the
 * default list of rules defined by the GraphQL specification will be used.
 *
 * Each validation rules is a function which returns a visitor
 * (see the language/visitor API). Visitor methods are expected to return
 * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
 *
 * Optionally a custom TypeInfo instance may be provided. If not provided, one
 * will be created from the provided schema.
 */
declare export function validate(
  schema: GraphQLSchema,
  documentAST: DocumentNode,
  rules?: ?$ReadOnlyArray<ValidationRule>,
  typeInfo?: ?TypeInfo,
  options?: ?{| maxErrors?: number |},
): $ReadOnlyArray<GraphQLError>;

/**
 * @internal
 */
declare export function validateSDL(
  documentAST: DocumentNode,
  schemaToExtend?: ?GraphQLSchema,
  rules?: ?$ReadOnlyArray<SDLValidationRule>,
): $ReadOnlyArray<GraphQLError>;

/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */
declare export function assertValidSDL(documentAST: DocumentNode): void;

/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */
declare export function assertValidSDLExtension(
  documentAST: DocumentNode,
  schema: GraphQLSchema,
): void;
