{"version":3,"file":"introspectionFromSchema.js","sourceRoot":"","sources":["../../src/utilities/introspectionFromSchema.ts"],"names":[],"mappings":";;AAuBA,0DAiBC;AAxCD,0DAAoD;AAEpD,qDAA8C;AAI9C,wDAAsD;AAMtD,yEAAmE;AAEnE;;;;;;;;GAQG;AACH,SAAgB,uBAAuB,CACrC,MAAqB,EACrB,OAA8B;IAE9B,MAAM,mBAAmB,GAAG;QAC1B,cAAc,EAAE,IAAI;QACpB,qBAAqB,EAAE,IAAI;QAC3B,iBAAiB,EAAE,IAAI;QACvB,qBAAqB,EAAE,IAAI;QAC3B,KAAK,EAAE,IAAI;QACX,GAAG,OAAO;KACX,CAAC;IAEF,MAAM,QAAQ,GAAG,IAAA,iBAAK,EAAC,IAAA,gDAAqB,EAAC,mBAAmB,CAAC,CAAC,CAAC;IACnE,MAAM,MAAM,GAAG,IAAA,wBAAW,EAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,CAAU,MAAM,CAAC,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,SAAtD,wBAAS,SAA+C;IACxD,OAAO,MAAM,CAAC,IAAW,CAAC;AAC5B,CAAC","sourcesContent":["import { invariant } from '../jsutils/invariant.js';\n\nimport { parse } from '../language/parser.js';\n\nimport type { GraphQLSchema } from '../type/schema.js';\n\nimport { executeSync } from '../execution/execute.js';\n\nimport type {\n  IntrospectionOptions,\n  IntrospectionQuery,\n} from './getIntrospectionQuery.js';\nimport { getIntrospectionQuery } from './getIntrospectionQuery.js';\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nexport function introspectionFromSchema(\n  schema: GraphQLSchema,\n  options?: IntrospectionOptions,\n): IntrospectionQuery {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    oneOf: true,\n    ...options,\n  };\n\n  const document = parse(getIntrospectionQuery(optionsWithDefaults));\n  const result = executeSync({ schema, document });\n  invariant(result.errors == null && result.data != null);\n  return result.data as any;\n}\n"]}