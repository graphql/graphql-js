{"version":3,"file":"getIntrospectionQuery.js","sourceRoot":"","sources":["../../src/utilities/getIntrospectionQuery.ts"],"names":[],"mappings":";;AAgDA,sDAsIC;AA1ID;;;GAGG;AACH,SAAgB,qBAAqB,CAAC,OAA8B;IAClE,MAAM,kBAAkB,GAAG;QACzB,YAAY,EAAE,IAAI;QAClB,cAAc,EAAE,KAAK;QACrB,qBAAqB,EAAE,KAAK;QAC5B,iBAAiB,EAAE,KAAK;QACxB,qBAAqB,EAAE,KAAK;QAC5B,KAAK,EAAE,KAAK;QACZ,GAAG,OAAO;KACX,CAAC;IAEF,MAAM,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1E,MAAM,cAAc,GAAG,kBAAkB,CAAC,cAAc;QACtD,CAAC,CAAC,gBAAgB;QAClB,CAAC,CAAC,EAAE,CAAC;IACP,MAAM,qBAAqB,GAAG,kBAAkB,CAAC,qBAAqB;QACpE,CAAC,CAAC,cAAc;QAChB,CAAC,CAAC,EAAE,CAAC;IACP,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,iBAAiB;QAC5D,CAAC,CAAC,YAAY;QACd,CAAC,CAAC,EAAE,CAAC;IAEP,SAAS,gBAAgB,CAAC,GAAW;QACnC,OAAO,kBAAkB,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7D,CAAC;IACD,MAAM,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;IAExD,OAAO;;;UAGC,iBAAiB;;;;;;;;;YASf,YAAY;YACZ,qBAAqB;;gBAEjB,gBAAgB,CAAC,2BAA2B,CAAC;;;;;;;;;;QAUrD,YAAY;QACZ,cAAc;QACd,KAAK;;;UAGH,YAAY;cACR,gBAAgB,CAAC,2BAA2B,CAAC;;;;;;;;;mBASxC,gBAAgB,CAAC,2BAA2B,CAAC;;;;;;;;UAQtD,YAAY;;;;;;;;;;;QAWd,YAAY;;;QAGZ,gBAAgB,CAAC,cAAc,CAAC;QAChC,gBAAgB,CAAC,mBAAmB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2C1C,CAAC;AACJ,CAAC","sourcesContent":["import type { Maybe } from '../jsutils/Maybe.js';\n\nimport type { DirectiveLocation } from '../language/directiveLocation.js';\n\nimport type { TypeKind } from '../type/introspection.js';\n\nexport interface IntrospectionOptions {\n  /**\n   * Whether to include descriptions in the introspection result.\n   * Default: true\n   */\n  descriptions?: boolean;\n\n  /**\n   * Whether to include `specifiedByURL` in the introspection result.\n   * Default: false\n   */\n  specifiedByUrl?: boolean;\n\n  /**\n   * Whether to include `isRepeatable` flag on directives.\n   * Default: false\n   */\n  directiveIsRepeatable?: boolean;\n\n  /**\n   * Whether to include `description` field on schema.\n   * Default: false\n   */\n  schemaDescription?: boolean;\n\n  /**\n   * Whether target GraphQL server support deprecation of input values.\n   * Default: false\n   */\n  inputValueDeprecation?: boolean;\n\n  /**\n   * Whether target GraphQL server supports `@oneOf` input objects.\n   * Default: false\n   */\n  oneOf?: boolean;\n}\n\n/**\n * Produce the GraphQL query recommended for a full schema introspection.\n * Accepts optional IntrospectionOptions.\n */\nexport function getIntrospectionQuery(options?: IntrospectionOptions): string {\n  const optionsWithDefault = {\n    descriptions: true,\n    specifiedByUrl: false,\n    directiveIsRepeatable: false,\n    schemaDescription: false,\n    inputValueDeprecation: false,\n    oneOf: false,\n    ...options,\n  };\n\n  const descriptions = optionsWithDefault.descriptions ? 'description' : '';\n  const specifiedByUrl = optionsWithDefault.specifiedByUrl\n    ? 'specifiedByURL'\n    : '';\n  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable\n    ? 'isRepeatable'\n    : '';\n  const schemaDescription = optionsWithDefault.schemaDescription\n    ? descriptions\n    : '';\n\n  function inputDeprecation(str: string) {\n    return optionsWithDefault.inputValueDeprecation ? str : '';\n  }\n  const oneOf = optionsWithDefault.oneOf ? 'isOneOf' : '';\n\n  return `\n    query IntrospectionQuery {\n      __schema {\n        ${schemaDescription}\n        queryType { name kind }\n        mutationType { name kind }\n        subscriptionType { name kind }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${descriptions}\n          ${directiveIsRepeatable}\n          locations\n          args${inputDeprecation('(includeDeprecated: true)')} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${descriptions}\n      ${specifiedByUrl}\n      ${oneOf}\n      fields(includeDeprecated: true) {\n        name\n        ${descriptions}\n        args${inputDeprecation('(includeDeprecated: true)')} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${inputDeprecation('(includeDeprecated: true)')} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${descriptions}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${descriptions}\n      type { ...TypeRef }\n      defaultValue\n      ${inputDeprecation('isDeprecated')}\n      ${inputDeprecation('deprecationReason')}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n}\n\nexport interface IntrospectionQuery {\n  readonly __schema: IntrospectionSchema;\n}\n\nexport interface IntrospectionSchema {\n  readonly description?: Maybe<string>;\n  readonly queryType: IntrospectionNamedTypeRef<IntrospectionObjectType>;\n  readonly mutationType: Maybe<\n    IntrospectionNamedTypeRef<IntrospectionObjectType>\n  >;\n  readonly subscriptionType: Maybe<\n    IntrospectionNamedTypeRef<IntrospectionObjectType>\n  >;\n  readonly types: ReadonlyArray<IntrospectionType>;\n  readonly directives: ReadonlyArray<IntrospectionDirective>;\n}\n\nexport type IntrospectionType =\n  | IntrospectionScalarType\n  | IntrospectionObjectType\n  | IntrospectionInterfaceType\n  | IntrospectionUnionType\n  | IntrospectionEnumType\n  | IntrospectionInputObjectType;\n\nexport type IntrospectionOutputType =\n  | IntrospectionScalarType\n  | IntrospectionObjectType\n  | IntrospectionInterfaceType\n  | IntrospectionUnionType\n  | IntrospectionEnumType;\n\nexport type IntrospectionInputType =\n  | IntrospectionScalarType\n  | IntrospectionEnumType\n  | IntrospectionInputObjectType;\n\nexport interface IntrospectionScalarType {\n  readonly kind: typeof TypeKind.SCALAR;\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly specifiedByURL?: Maybe<string>;\n}\n\nexport interface IntrospectionObjectType {\n  readonly kind: typeof TypeKind.OBJECT;\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly fields: ReadonlyArray<IntrospectionField>;\n  readonly interfaces: ReadonlyArray<\n    IntrospectionNamedTypeRef<IntrospectionInterfaceType>\n  >;\n}\n\nexport interface IntrospectionInterfaceType {\n  readonly kind: typeof TypeKind.INTERFACE;\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly fields: ReadonlyArray<IntrospectionField>;\n  readonly interfaces: ReadonlyArray<\n    IntrospectionNamedTypeRef<IntrospectionInterfaceType>\n  >;\n  readonly possibleTypes: ReadonlyArray<\n    IntrospectionNamedTypeRef<IntrospectionObjectType>\n  >;\n}\n\nexport interface IntrospectionUnionType {\n  readonly kind: typeof TypeKind.UNION;\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly possibleTypes: ReadonlyArray<\n    IntrospectionNamedTypeRef<IntrospectionObjectType>\n  >;\n}\n\nexport interface IntrospectionEnumType {\n  readonly kind: typeof TypeKind.ENUM;\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly enumValues: ReadonlyArray<IntrospectionEnumValue>;\n}\n\nexport interface IntrospectionInputObjectType {\n  readonly kind: typeof TypeKind.INPUT_OBJECT;\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly inputFields: ReadonlyArray<IntrospectionInputValue>;\n  readonly isOneOf: boolean;\n}\n\nexport interface IntrospectionListTypeRef<\n  T extends IntrospectionTypeRef = IntrospectionTypeRef,\n> {\n  readonly kind: typeof TypeKind.LIST;\n  readonly ofType: T;\n}\n\nexport interface IntrospectionNonNullTypeRef<\n  T extends IntrospectionTypeRef = IntrospectionTypeRef,\n> {\n  readonly kind: typeof TypeKind.NON_NULL;\n  readonly ofType: T;\n}\n\nexport type IntrospectionTypeRef =\n  | IntrospectionNamedTypeRef\n  | IntrospectionListTypeRef\n  | IntrospectionNonNullTypeRef<\n      IntrospectionNamedTypeRef | IntrospectionListTypeRef\n    >;\n\nexport type IntrospectionOutputTypeRef =\n  | IntrospectionNamedTypeRef<IntrospectionOutputType>\n  | IntrospectionListTypeRef<IntrospectionOutputTypeRef>\n  | IntrospectionNonNullTypeRef<\n      | IntrospectionNamedTypeRef<IntrospectionOutputType>\n      | IntrospectionListTypeRef<IntrospectionOutputTypeRef>\n    >;\n\nexport type IntrospectionInputTypeRef =\n  | IntrospectionNamedTypeRef<IntrospectionInputType>\n  | IntrospectionListTypeRef<IntrospectionInputTypeRef>\n  | IntrospectionNonNullTypeRef<\n      | IntrospectionNamedTypeRef<IntrospectionInputType>\n      | IntrospectionListTypeRef<IntrospectionInputTypeRef>\n    >;\n\nexport interface IntrospectionNamedTypeRef<\n  T extends IntrospectionType = IntrospectionType,\n> {\n  readonly kind: T['kind'];\n  readonly name: string;\n}\n\nexport interface IntrospectionField {\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly args: ReadonlyArray<IntrospectionInputValue>;\n  readonly type: IntrospectionOutputTypeRef;\n  readonly isDeprecated: boolean;\n  readonly deprecationReason: Maybe<string>;\n}\n\nexport interface IntrospectionInputValue {\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly type: IntrospectionInputTypeRef;\n  readonly defaultValue: Maybe<string>;\n  readonly isDeprecated?: boolean;\n  readonly deprecationReason?: Maybe<string>;\n}\n\nexport interface IntrospectionEnumValue {\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly isDeprecated: boolean;\n  readonly deprecationReason: Maybe<string>;\n}\n\nexport interface IntrospectionDirective {\n  readonly name: string;\n  readonly description?: Maybe<string>;\n  readonly isRepeatable?: boolean;\n  readonly locations: ReadonlyArray<DirectiveLocation>;\n  readonly args: ReadonlyArray<IntrospectionInputValue>;\n}\n"]}