{"version":3,"file":"replaceVariables.js","sourceRoot":"","sources":["../../src/utilities/replaceVariables.ts"],"names":[],"mappings":";;AAqBA,4CA8EC;AA5FD,mDAA4C;AAI5C,2DAAqD;AAErD;;;;;;;GAOG;AACH,SAAgB,gBAAgB,CAC9B,SAAoB,EACpB,cAAsC,EACtC,sBAA8C;IAE9C,QAAQ,SAAS,CAAC,IAAI,EAAE,CAAC;QACvB,KAAK,eAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;YACrC,MAAM,oBAAoB,GAAG,sBAAsB,EAAE,OAAO,CAAC,OAAO,CAAC;gBACnE,CAAC,CAAC,sBAAsB;gBACxB,CAAC,CAAC,cAAc,CAAC;YAEnB,MAAM,oBAAoB,GAAG,oBAAoB,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;YACpE,IAAI,oBAAoB,IAAI,IAAI,EAAE,CAAC;gBACjC,OAAO,EAAE,IAAI,EAAE,eAAI,CAAC,IAAI,EAAE,CAAC;YAC7B,CAAC;YAED,IAAI,oBAAoB,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC7C,MAAM,YAAY,GAAG,oBAAoB,CAAC,SAAS,CAAC,OAAO,CAAC;gBAC5D,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;oBAC/B,OAAO,YAAY,CAAC,OAAO,CAAC;gBAC9B,CAAC;YACH,CAAC;YAED,OAAO,IAAA,kCAAc,EACnB,oBAAoB,CAAC,KAAK,EAC1B,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAClB,CAAC;QACtB,CAAC;QACD,KAAK,eAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,SAAS,GAA2B,EAAE,CAAC;YAC7C,KAAK,MAAM,KAAK,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;gBACrC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,eAAI,CAAC,QAAQ,EAAE,CAAC;oBACvC,MAAM,oBAAoB,GACxB,sBAAsB,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;wBACvD,cAAc,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAElD,IACE,oBAAoB,EAAE,KAAK,KAAK,SAAS;wBACzC,oBAAoB,EAAE,SAAS,CAAC,OAAO,KAAK,SAAS,EACrD,CAAC;wBACD,SAAS;oBACX,CAAC;gBACH,CAAC;gBACD,MAAM,iBAAiB,GAAG,gBAAgB,CACxC,KAAK,CAAC,KAAK,EACX,cAAc,EACd,sBAAsB,CACvB,CAAC;gBACF,SAAS,CAAC,IAAI,CAAC;oBACb,GAAG,KAAK;oBACR,KAAK,EAAE,iBAAiB;iBACzB,CAAC,CAAC;YACL,CAAC;YACD,OAAO;gBACL,GAAG,SAAS;gBACZ,MAAM,EAAE,SAAS;aACA,CAAC;QACtB,CAAC;QACD,KAAK,eAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,MAAM,SAAS,GAAqB,EAAE,CAAC;YACvC,KAAK,MAAM,KAAK,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;gBACrC,MAAM,gBAAgB,GAAG,gBAAgB,CACvC,KAAK,EACL,cAAc,EACd,sBAAsB,CACvB,CAAC;gBACF,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACnC,CAAC;YACD,OAAO;gBACL,GAAG,SAAS;gBACZ,MAAM,EAAE,SAAS;aACA,CAAC;QACtB,CAAC;QACD,OAAO,CAAC,CAAC,CAAC;YACR,OAAO,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import type { Maybe } from '../jsutils/Maybe.js';\n\nimport type {\n  ConstValueNode,\n  ObjectFieldNode,\n  ValueNode,\n} from '../language/ast.js';\nimport { Kind } from '../language/kinds.js';\n\nimport type { VariableValues } from '../execution/values.js';\n\nimport { valueToLiteral } from './valueToLiteral.js';\n\n/**\n * Replaces any Variables found within an AST Value literal with literals\n * supplied from a map of variable values, or removed if no variable replacement\n * exists, returning a constant value.\n *\n * Used primarily to ensure only complete constant values are used during input\n * coercion of custom scalars which accept complex literals.\n */\nexport function replaceVariables(\n  valueNode: ValueNode,\n  variableValues?: Maybe<VariableValues>,\n  fragmentVariableValues?: Maybe<VariableValues>,\n): ConstValueNode {\n  switch (valueNode.kind) {\n    case Kind.VARIABLE: {\n      const varName = valueNode.name.value;\n      const scopedVariableValues = fragmentVariableValues?.sources[varName]\n        ? fragmentVariableValues\n        : variableValues;\n\n      const scopedVariableSource = scopedVariableValues?.sources[varName];\n      if (scopedVariableSource == null) {\n        return { kind: Kind.NULL };\n      }\n\n      if (scopedVariableSource.value === undefined) {\n        const defaultValue = scopedVariableSource.signature.default;\n        if (defaultValue !== undefined) {\n          return defaultValue.literal;\n        }\n      }\n\n      return valueToLiteral(\n        scopedVariableSource.value,\n        scopedVariableSource.signature.type,\n      ) as ConstValueNode;\n    }\n    case Kind.OBJECT: {\n      const newFields: Array<ObjectFieldNode> = [];\n      for (const field of valueNode.fields) {\n        if (field.value.kind === Kind.VARIABLE) {\n          const scopedVariableSource =\n            fragmentVariableValues?.sources[field.value.name.value] ??\n            variableValues?.sources[field.value.name.value];\n\n          if (\n            scopedVariableSource?.value === undefined &&\n            scopedVariableSource?.signature.default === undefined\n          ) {\n            continue;\n          }\n        }\n        const newFieldNodeValue = replaceVariables(\n          field.value,\n          variableValues,\n          fragmentVariableValues,\n        );\n        newFields.push({\n          ...field,\n          value: newFieldNodeValue,\n        });\n      }\n      return {\n        ...valueNode,\n        fields: newFields,\n      } as ConstValueNode;\n    }\n    case Kind.LIST: {\n      const newValues: Array<ValueNode> = [];\n      for (const value of valueNode.values) {\n        const newItemNodeValue = replaceVariables(\n          value,\n          variableValues,\n          fragmentVariableValues,\n        );\n        newValues.push(newItemNodeValue);\n      }\n      return {\n        ...valueNode,\n        values: newValues,\n      } as ConstValueNode;\n    }\n    default: {\n      return valueNode;\n    }\n  }\n}\n"]}