{"version":3,"file":"directives.js","sourceRoot":"","sources":["../../src/type/directives.ts"],"names":[],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.js';\nimport { inspect } from '../jsutils/inspect.js';\nimport { instanceOf } from '../jsutils/instanceOf.js';\nimport { isObjectLike } from '../jsutils/isObjectLike.js';\nimport { keyValMap } from '../jsutils/keyValMap.js';\nimport type { Maybe } from '../jsutils/Maybe.js';\nimport type { ObjMap } from '../jsutils/ObjMap.js';\nimport { toObjMapWithSymbols } from '../jsutils/toObjMap.js';\n\nimport type { DirectiveDefinitionNode } from '../language/ast.js';\nimport { DirectiveLocation } from '../language/directiveLocation.js';\n\nimport { assertName } from './assertName.js';\nimport type {\n  GraphQLArgumentConfig,\n  GraphQLFieldNormalizedConfigArgumentMap,\n  GraphQLSchemaElement,\n} from './definition.js';\nimport { GraphQLArgument, GraphQLNonNull } from './definition.js';\nimport { GraphQLBoolean, GraphQLInt, GraphQLString } from './scalars.js';\n\n/**\n * Test if the given value is a GraphQL directive.\n */\nexport function isDirective(directive: unknown): directive is GraphQLDirective {\n  return instanceOf(directive, GraphQLDirective);\n}\n\nexport function assertDirective(directive: unknown): GraphQLDirective {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n  return directive;\n}\n\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\nexport interface GraphQLDirectiveExtensions {\n  [attributeName: string | symbol]: unknown;\n}\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective implements GraphQLSchemaElement {\n  name: string;\n  description: Maybe<string>;\n  locations: ReadonlyArray<DirectiveLocation>;\n  args: ReadonlyArray<GraphQLArgument>;\n  isRepeatable: boolean;\n  extensions: Readonly<GraphQLDirectiveExtensions>;\n  astNode: Maybe<DirectiveDefinitionNode>;\n\n  constructor(config: Readonly<GraphQLDirectiveConfig>) {\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = config.isRepeatable ?? false;\n    this.extensions = toObjMapWithSymbols(config.extensions);\n    this.astNode = config.astNode;\n\n    devAssert(\n      Array.isArray(config.locations),\n      `@${this.name} locations must be an Array.`,\n    );\n\n    const args = config.args ?? {};\n    devAssert(\n      isObjectLike(args) && !Array.isArray(args),\n      `@${this.name} args must be an object with argument names as keys.`,\n    );\n\n    this.args = Object.entries(args).map(\n      ([argName, argConfig]) => new GraphQLArgument(this, argName, argConfig),\n    );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig(): GraphQLDirectiveNormalizedConfig {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: keyValMap(\n        this.args,\n        (arg) => arg.name,\n        (arg) => arg.toConfig(),\n      ),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString(): string {\n    return '@' + this.name;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n}\n\nexport interface GraphQLDirectiveConfig {\n  name: string;\n  description?: Maybe<string>;\n  locations: ReadonlyArray<DirectiveLocation>;\n  args?: Maybe<ObjMap<GraphQLArgumentConfig>>;\n  isRepeatable?: Maybe<boolean>;\n  extensions?: Maybe<Readonly<GraphQLDirectiveExtensions>>;\n  astNode?: Maybe<DirectiveDefinitionNode>;\n}\n\nexport interface GraphQLDirectiveNormalizedConfig\n  extends GraphQLDirectiveConfig {\n  args: GraphQLFieldNormalizedConfigArgumentMap;\n  isRepeatable: boolean;\n  extensions: Readonly<GraphQLDirectiveExtensions>;\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective: GraphQLDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\nexport const GraphQLSkipDirective: GraphQLDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n\n/**\n * Used to conditionally defer fragments.\n */\nexport const GraphQLDeferDirective = new GraphQLDirective({\n  name: 'defer',\n  description:\n    'Directs the executor to defer this fragment when the `if` argument is true or undefined.',\n  locations: [\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Deferred when true or undefined.',\n      default: { value: true },\n    },\n    label: {\n      type: GraphQLString,\n      description: 'Unique name',\n    },\n  },\n});\n\n/**\n * Used to conditionally stream list fields.\n */\nexport const GraphQLStreamDirective = new GraphQLDirective({\n  name: 'stream',\n  description:\n    'Directs the executor to stream plural fields when the `if` argument is true or undefined.',\n  locations: [DirectiveLocation.FIELD],\n  args: {\n    initialCount: {\n      default: { value: 0 },\n      type: new GraphQLNonNull(GraphQLInt),\n      description: 'Number of items to return immediately',\n    },\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Stream when true or undefined.',\n      default: { value: true },\n    },\n    label: {\n      type: GraphQLString,\n      description: 'Unique name',\n    },\n  },\n});\n\n/**\n * Constant string used for default reason for a deprecation.\n */\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\nexport const GraphQLDeprecatedDirective: GraphQLDirective =\n  new GraphQLDirective({\n    name: 'deprecated',\n    description: 'Marks an element of a GraphQL schema as no longer supported.',\n    locations: [\n      DirectiveLocation.FIELD_DEFINITION,\n      DirectiveLocation.ARGUMENT_DEFINITION,\n      DirectiveLocation.INPUT_FIELD_DEFINITION,\n      DirectiveLocation.ENUM_VALUE,\n    ],\n    args: {\n      reason: {\n        type: new GraphQLNonNull(GraphQLString),\n        description:\n          'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n        default: { value: DEFAULT_DEPRECATION_REASON },\n      },\n    },\n  });\n\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\nexport const GraphQLSpecifiedByDirective: GraphQLDirective =\n  new GraphQLDirective({\n    name: 'specifiedBy',\n    description: 'Exposes a URL that specifies the behavior of this scalar.',\n    locations: [DirectiveLocation.SCALAR],\n    args: {\n      url: {\n        type: new GraphQLNonNull(GraphQLString),\n        description: 'The URL that specifies the behavior of this scalar.',\n      },\n    },\n  });\n\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\nexport const GraphQLOneOfDirective: GraphQLDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n\n/**\n * The full list of specified directives.\n */\nexport const specifiedDirectives: ReadonlyArray<GraphQLDirective> =\n  Object.freeze([\n    GraphQLIncludeDirective,\n    GraphQLSkipDirective,\n    GraphQLDeprecatedDirective,\n    GraphQLSpecifiedByDirective,\n    GraphQLOneOfDirective,\n  ]);\n\nexport function isSpecifiedDirective(directive: GraphQLDirective): boolean {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n"]}