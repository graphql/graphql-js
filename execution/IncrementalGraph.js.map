{"version":3,"file":"IncrementalGraph.js","sourceRoot":"","sources":["../../src/execution/IncrementalGraph.ts"],"names":[],"mappings":"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","sourcesContent":["import { BoxedPromiseOrValue } from '../jsutils/BoxedPromiseOrValue.js';\nimport { invariant } from '../jsutils/invariant.js';\nimport { isPromise } from '../jsutils/isPromise.js';\nimport { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';\n\nimport type { GraphQLError } from '../error/GraphQLError.js';\n\nimport type {\n  DeferredFragmentRecord,\n  DeliveryGroup,\n  IncrementalDataRecord,\n  IncrementalDataRecordResult,\n  PendingExecutionGroup,\n  StreamItemRecord,\n  StreamRecord,\n  SuccessfulExecutionGroup,\n} from './types.js';\nimport { isDeferredFragmentRecord, isPendingExecutionGroup } from './types.js';\n\n/**\n * @internal\n */\nexport class IncrementalGraph {\n  private _rootNodes: Set<DeliveryGroup>;\n\n  private _completedQueue: Array<IncrementalDataRecordResult>;\n  private _nextQueue: Array<\n    (iterable: Iterable<IncrementalDataRecordResult> | undefined) => void\n  >;\n\n  constructor() {\n    this._rootNodes = new Set();\n    this._completedQueue = [];\n    this._nextQueue = [];\n  }\n\n  getNewRootNodes(\n    incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,\n  ): ReadonlyArray<DeliveryGroup> {\n    const initialResultChildren = new Set<DeliveryGroup>();\n    this._addIncrementalDataRecords(\n      incrementalDataRecords,\n      undefined,\n      initialResultChildren,\n    );\n    return this._promoteNonEmptyToRoot(initialResultChildren);\n  }\n\n  addCompletedSuccessfulExecutionGroup(\n    successfulExecutionGroup: SuccessfulExecutionGroup,\n  ): void {\n    const { pendingExecutionGroup, incrementalDataRecords } =\n      successfulExecutionGroup;\n\n    const deferredFragmentRecords =\n      pendingExecutionGroup.deferredFragmentRecords;\n\n    for (const deferredFragmentRecord of deferredFragmentRecords) {\n      const { pendingExecutionGroups, successfulExecutionGroups } =\n        deferredFragmentRecord;\n      pendingExecutionGroups.delete(pendingExecutionGroup);\n      successfulExecutionGroups.add(successfulExecutionGroup);\n    }\n\n    if (incrementalDataRecords !== undefined) {\n      this._addIncrementalDataRecords(\n        incrementalDataRecords,\n        deferredFragmentRecords,\n      );\n    }\n  }\n\n  *currentCompletedBatch(): Generator<IncrementalDataRecordResult> {\n    let completed;\n    while ((completed = this._completedQueue.shift()) !== undefined) {\n      yield completed;\n    }\n    if (this._rootNodes.size === 0) {\n      for (const resolve of this._nextQueue) {\n        resolve(undefined);\n      }\n    }\n  }\n\n  nextCompletedBatch(): Promise<\n    Iterable<IncrementalDataRecordResult> | undefined\n  > {\n    const { promise, resolve } = promiseWithResolvers<\n      Iterable<IncrementalDataRecordResult> | undefined\n    >();\n    this._nextQueue.push(resolve);\n    return promise;\n  }\n\n  abort(): void {\n    for (const resolve of this._nextQueue) {\n      resolve(undefined);\n    }\n  }\n\n  hasNext(): boolean {\n    return this._rootNodes.size > 0;\n  }\n\n  completeDeferredFragment(deferredFragmentRecord: DeferredFragmentRecord):\n    | {\n        newRootNodes: ReadonlyArray<DeliveryGroup>;\n        successfulExecutionGroups: ReadonlyArray<SuccessfulExecutionGroup>;\n      }\n    | undefined {\n    if (\n      !this._rootNodes.has(deferredFragmentRecord) ||\n      deferredFragmentRecord.pendingExecutionGroups.size > 0\n    ) {\n      return;\n    }\n    const successfulExecutionGroups = Array.from(\n      deferredFragmentRecord.successfulExecutionGroups,\n    );\n    this._rootNodes.delete(deferredFragmentRecord);\n    for (const successfulExecutionGroup of successfulExecutionGroups) {\n      for (const otherDeferredFragmentRecord of successfulExecutionGroup\n        .pendingExecutionGroup.deferredFragmentRecords) {\n        otherDeferredFragmentRecord.successfulExecutionGroups.delete(\n          successfulExecutionGroup,\n        );\n      }\n    }\n    const newRootNodes = this._promoteNonEmptyToRoot(\n      deferredFragmentRecord.children,\n    );\n    return { newRootNodes, successfulExecutionGroups };\n  }\n\n  removeDeferredFragment(\n    deferredFragmentRecord: DeferredFragmentRecord,\n  ): boolean {\n    if (!this._rootNodes.has(deferredFragmentRecord)) {\n      return false;\n    }\n    this._rootNodes.delete(deferredFragmentRecord);\n    return true;\n  }\n\n  removeStream(streamRecord: StreamRecord): void {\n    this._rootNodes.delete(streamRecord);\n  }\n\n  private _addIncrementalDataRecords(\n    incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,\n    parents: ReadonlyArray<DeferredFragmentRecord> | undefined,\n    initialResultChildren?: Set<DeliveryGroup>,\n  ): void {\n    for (const incrementalDataRecord of incrementalDataRecords) {\n      if (isPendingExecutionGroup(incrementalDataRecord)) {\n        for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {\n          this._addDeferredFragment(\n            deferredFragmentRecord,\n            initialResultChildren,\n          );\n          deferredFragmentRecord.pendingExecutionGroups.add(\n            incrementalDataRecord,\n          );\n        }\n        if (this._completesRootNode(incrementalDataRecord)) {\n          this._onExecutionGroup(incrementalDataRecord);\n        }\n      } else if (parents === undefined) {\n        invariant(initialResultChildren !== undefined);\n        initialResultChildren.add(incrementalDataRecord);\n      } else {\n        for (const parent of parents) {\n          this._addDeferredFragment(parent, initialResultChildren);\n          parent.children.add(incrementalDataRecord);\n        }\n      }\n    }\n  }\n\n  private _promoteNonEmptyToRoot(\n    maybeEmptyNewRootNodes: Set<DeliveryGroup>,\n  ): ReadonlyArray<DeliveryGroup> {\n    const newRootNodes: Array<DeliveryGroup> = [];\n    for (const node of maybeEmptyNewRootNodes) {\n      if (isDeferredFragmentRecord(node)) {\n        if (node.pendingExecutionGroups.size > 0) {\n          for (const pendingExecutionGroup of node.pendingExecutionGroups) {\n            if (!this._completesRootNode(pendingExecutionGroup)) {\n              this._onExecutionGroup(pendingExecutionGroup);\n            }\n          }\n          this._rootNodes.add(node);\n          newRootNodes.push(node);\n          continue;\n        }\n        for (const child of node.children) {\n          maybeEmptyNewRootNodes.add(child);\n        }\n      } else {\n        this._rootNodes.add(node);\n        newRootNodes.push(node);\n\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._onStreamItems(node);\n      }\n    }\n    return newRootNodes;\n  }\n\n  private _completesRootNode(\n    pendingExecutionGroup: PendingExecutionGroup,\n  ): boolean {\n    return pendingExecutionGroup.deferredFragmentRecords.some(\n      (deferredFragmentRecord) => this._rootNodes.has(deferredFragmentRecord),\n    );\n  }\n\n  private _addDeferredFragment(\n    deferredFragmentRecord: DeferredFragmentRecord,\n    initialResultChildren: Set<DeliveryGroup> | undefined,\n  ): void {\n    if (this._rootNodes.has(deferredFragmentRecord)) {\n      return;\n    }\n    const parent = deferredFragmentRecord.parent;\n    if (parent === undefined) {\n      invariant(initialResultChildren !== undefined);\n      initialResultChildren.add(deferredFragmentRecord);\n      return;\n    }\n    parent.children.add(deferredFragmentRecord);\n    this._addDeferredFragment(parent, initialResultChildren);\n  }\n\n  private _onExecutionGroup(\n    pendingExecutionGroup: PendingExecutionGroup,\n  ): void {\n    let completedExecutionGroup = pendingExecutionGroup.result;\n    if (!(completedExecutionGroup instanceof BoxedPromiseOrValue)) {\n      completedExecutionGroup = completedExecutionGroup();\n    }\n    const value = completedExecutionGroup.value;\n    if (isPromise(value)) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      value.then((resolved) => this._enqueue(resolved));\n    } else {\n      this._enqueue(value);\n    }\n  }\n\n  private async _onStreamItems(streamRecord: StreamRecord): Promise<void> {\n    let items: Array<unknown> = [];\n    let errors: Array<GraphQLError> = [];\n    let incrementalDataRecords: Array<IncrementalDataRecord> = [];\n    const streamItemQueue = streamRecord.streamItemQueue;\n    let streamItemRecord: StreamItemRecord | undefined;\n    while ((streamItemRecord = streamItemQueue.shift()) !== undefined) {\n      let result =\n        streamItemRecord instanceof BoxedPromiseOrValue\n          ? streamItemRecord.value\n          : streamItemRecord().value;\n      if (isPromise(result)) {\n        if (items.length > 0) {\n          this._enqueue({\n            streamRecord,\n            result:\n              // TODO add additional test case or rework for coverage\n              errors.length > 0 /* c8 ignore start */\n                ? { items, errors } /* c8 ignore stop */\n                : { items },\n            incrementalDataRecords,\n          });\n          items = [];\n          errors = [];\n          incrementalDataRecords = [];\n        }\n        // eslint-disable-next-line no-await-in-loop\n        result = await result;\n        // wait an additional tick to coalesce resolving additional promises\n        // within the queue\n        // eslint-disable-next-line no-await-in-loop\n        await Promise.resolve();\n      }\n      if (result.item === undefined) {\n        if (items.length > 0) {\n          this._enqueue({\n            streamRecord,\n            result: errors.length > 0 ? { items, errors } : { items },\n            incrementalDataRecords,\n          });\n        }\n        this._enqueue(\n          result.errors === undefined\n            ? { streamRecord }\n            : {\n                streamRecord,\n                errors: result.errors,\n              },\n        );\n        return;\n      }\n      items.push(result.item);\n      if (result.errors !== undefined) {\n        errors.push(...result.errors);\n      }\n      if (result.incrementalDataRecords !== undefined) {\n        incrementalDataRecords.push(...result.incrementalDataRecords);\n      }\n    }\n  }\n\n  private _enqueue(completed: IncrementalDataRecordResult): void {\n    this._completedQueue.push(completed);\n    const next = this._nextQueue.shift();\n    if (next === undefined) {\n      return;\n    }\n    next(this.currentCompletedBatch());\n  }\n}\n"]}