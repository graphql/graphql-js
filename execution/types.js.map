{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/execution/types.ts"],"names":[],"mappings":";;;AAyKA,0DAIC;AAMD,8DAIC;AAiBD,wDAIC;AAqCD,4DAIC;AA4BD,8DAIC;AA5GD,SAAgB,uBAAuB,CACrC,qBAA4C;IAE5C,OAAO,yBAAyB,IAAI,qBAAqB,CAAC;AAC5D,CAAC;AAMD,SAAgB,yBAAyB,CACvC,2BAAwD;IAExD,OAAO,uBAAuB,IAAI,2BAA2B,CAAC;AAChE,CAAC;AAiBD,SAAgB,sBAAsB,CACpC,uBAAgD;IAEhD,OAAO,uBAAuB,CAAC,MAAM,KAAK,SAAS,CAAC;AACtD,CAAC;AAaD,gBAAgB;AAChB,MAAa,sBAAsB;IASjC,YACE,IAAsB,EACtB,KAAyB,EACzB,MAA0C;QAE1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,sBAAsB,GAAG,IAAI,GAAG,EAAE,CAAC;QACxC,IAAI,CAAC,yBAAyB,GAAG,IAAI,GAAG,EAAE,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IAC5B,CAAC;CACF;AArBD,wDAqBC;AAED,SAAgB,wBAAwB,CACtC,aAA4B;IAE5B,OAAO,aAAa,YAAY,sBAAsB,CAAC;AACzD,CAAC;AA4BD,SAAgB,yBAAyB,CACvC,aAA4B;IAE5B,OAAO,aAAa,IAAI,aAAa,CAAC;AACxC,CAAC","sourcesContent":["import type { BoxedPromiseOrValue } from '../jsutils/BoxedPromiseOrValue.js';\nimport type { ObjMap } from '../jsutils/ObjMap.js';\nimport type { Path } from '../jsutils/Path.js';\n\nimport type {\n  GraphQLError,\n  GraphQLFormattedError,\n} from '../error/GraphQLError.js';\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n *   - `hasNext` is true if a future payload is expected.\n *   - `extensions` is reserved for adding non-standard properties.\n *   - `incremental` is a list of the results from defer/stream directives.\n */\nexport interface ExecutionResult<\n  TData = ObjMap<unknown>,\n  TExtensions = ObjMap<unknown>,\n> {\n  errors?: ReadonlyArray<GraphQLError>;\n  data?: TData | null;\n  extensions?: TExtensions;\n}\n\nexport interface FormattedExecutionResult<\n  TData = ObjMap<unknown>,\n  TExtensions = ObjMap<unknown>,\n> {\n  errors?: ReadonlyArray<GraphQLFormattedError>;\n  data?: TData | null;\n  extensions?: TExtensions;\n}\n\nexport interface ExperimentalIncrementalExecutionResults<\n  TInitial = ObjMap<unknown>,\n  TSubsequent = unknown,\n  TExtensions = ObjMap<unknown>,\n> {\n  initialResult: InitialIncrementalExecutionResult<TInitial, TExtensions>;\n  subsequentResults: AsyncGenerator<\n    SubsequentIncrementalExecutionResult<TSubsequent, TExtensions>,\n    void,\n    void\n  >;\n}\n\nexport interface InitialIncrementalExecutionResult<\n  TData = ObjMap<unknown>,\n  TExtensions = ObjMap<unknown>,\n> extends ExecutionResult<TData, TExtensions> {\n  data: TData;\n  pending: ReadonlyArray<PendingResult>;\n  hasNext: true;\n  extensions?: TExtensions;\n}\n\nexport interface FormattedInitialIncrementalExecutionResult<\n  TData = ObjMap<unknown>,\n  TExtensions = ObjMap<unknown>,\n> extends FormattedExecutionResult<TData, TExtensions> {\n  data: TData;\n  pending: ReadonlyArray<PendingResult>;\n  hasNext: boolean;\n  extensions?: TExtensions;\n}\n\nexport interface SubsequentIncrementalExecutionResult<\n  TData = unknown,\n  TExtensions = ObjMap<unknown>,\n> {\n  pending?: ReadonlyArray<PendingResult>;\n  incremental?: ReadonlyArray<IncrementalResult<TData, TExtensions>>;\n  completed?: ReadonlyArray<CompletedResult>;\n  hasNext: boolean;\n  extensions?: TExtensions;\n}\n\nexport interface FormattedSubsequentIncrementalExecutionResult<\n  TData = unknown,\n  TExtensions = ObjMap<unknown>,\n> {\n  hasNext: boolean;\n  pending?: ReadonlyArray<PendingResult>;\n  incremental?: ReadonlyArray<FormattedIncrementalResult<TData, TExtensions>>;\n  completed?: ReadonlyArray<FormattedCompletedResult>;\n  extensions?: TExtensions;\n}\n\ninterface ExecutionGroupResult<TData = ObjMap<unknown>> {\n  errors?: ReadonlyArray<GraphQLError>;\n  data: TData;\n}\n\nexport interface IncrementalDeferResult<\n  TData = ObjMap<unknown>,\n  TExtensions = ObjMap<unknown>,\n> extends ExecutionGroupResult<TData> {\n  id: string;\n  subPath?: ReadonlyArray<string | number>;\n  extensions?: TExtensions;\n}\n\nexport interface FormattedIncrementalDeferResult<\n  TData = ObjMap<unknown>,\n  TExtensions = ObjMap<unknown>,\n> {\n  errors?: ReadonlyArray<GraphQLFormattedError>;\n  data: TData;\n  id: string;\n  subPath?: ReadonlyArray<string | number>;\n  extensions?: TExtensions;\n}\n\ninterface StreamItemsRecordResult<TData = ReadonlyArray<unknown>> {\n  errors?: ReadonlyArray<GraphQLError>;\n  items: TData;\n}\n\nexport interface IncrementalStreamResult<\n  TData = ReadonlyArray<unknown>,\n  TExtensions = ObjMap<unknown>,\n> extends StreamItemsRecordResult<TData> {\n  id: string;\n  subPath?: ReadonlyArray<string | number>;\n  extensions?: TExtensions;\n}\n\nexport interface FormattedIncrementalStreamResult<\n  TData = Array<unknown>,\n  TExtensions = ObjMap<unknown>,\n> {\n  errors?: ReadonlyArray<GraphQLFormattedError>;\n  items: TData;\n  id: string;\n  subPath?: ReadonlyArray<string | number>;\n  extensions?: TExtensions;\n}\n\nexport type IncrementalResult<TData = unknown, TExtensions = ObjMap<unknown>> =\n  | IncrementalDeferResult<TData, TExtensions>\n  | IncrementalStreamResult<TData, TExtensions>;\n\nexport type FormattedIncrementalResult<\n  TData = unknown,\n  TExtensions = ObjMap<unknown>,\n> =\n  | FormattedIncrementalDeferResult<TData, TExtensions>\n  | FormattedIncrementalStreamResult<TData, TExtensions>;\n\nexport interface PendingResult {\n  id: string;\n  path: ReadonlyArray<string | number>;\n  label?: string;\n}\n\nexport interface CompletedResult {\n  id: string;\n  errors?: ReadonlyArray<GraphQLError>;\n}\n\nexport interface FormattedCompletedResult {\n  path: ReadonlyArray<string | number>;\n  label?: string;\n  errors?: ReadonlyArray<GraphQLError>;\n}\n\nexport function isPendingExecutionGroup(\n  incrementalDataRecord: IncrementalDataRecord,\n): incrementalDataRecord is PendingExecutionGroup {\n  return 'deferredFragmentRecords' in incrementalDataRecord;\n}\n\nexport type CompletedExecutionGroup =\n  | SuccessfulExecutionGroup\n  | FailedExecutionGroup;\n\nexport function isCompletedExecutionGroup(\n  incrementalDataRecordResult: IncrementalDataRecordResult,\n): incrementalDataRecordResult is CompletedExecutionGroup {\n  return 'pendingExecutionGroup' in incrementalDataRecordResult;\n}\n\nexport interface SuccessfulExecutionGroup {\n  pendingExecutionGroup: PendingExecutionGroup;\n  path: Array<string | number>;\n  result: ExecutionGroupResult;\n  incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;\n  errors?: never;\n}\n\ninterface FailedExecutionGroup {\n  pendingExecutionGroup: PendingExecutionGroup;\n  path: Array<string | number>;\n  errors: ReadonlyArray<GraphQLError>;\n  result?: never;\n}\n\nexport function isFailedExecutionGroup(\n  completedExecutionGroup: CompletedExecutionGroup,\n): completedExecutionGroup is FailedExecutionGroup {\n  return completedExecutionGroup.errors !== undefined;\n}\n\ntype ThunkIncrementalResult<T> =\n  | BoxedPromiseOrValue<T>\n  | (() => BoxedPromiseOrValue<T>);\n\nexport interface PendingExecutionGroup {\n  deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;\n  result: ThunkIncrementalResult<CompletedExecutionGroup>;\n}\n\nexport type DeliveryGroup = DeferredFragmentRecord | StreamRecord;\n\n/** @internal */\nexport class DeferredFragmentRecord {\n  path: Path | undefined;\n  label: string | undefined;\n  id?: string | undefined;\n  parent: DeferredFragmentRecord | undefined;\n  pendingExecutionGroups: Set<PendingExecutionGroup>;\n  successfulExecutionGroups: Set<SuccessfulExecutionGroup>;\n  children: Set<DeliveryGroup>;\n\n  constructor(\n    path: Path | undefined,\n    label: string | undefined,\n    parent: DeferredFragmentRecord | undefined,\n  ) {\n    this.path = path;\n    this.label = label;\n    this.parent = parent;\n    this.pendingExecutionGroups = new Set();\n    this.successfulExecutionGroups = new Set();\n    this.children = new Set();\n  }\n}\n\nexport function isDeferredFragmentRecord(\n  deliveryGroup: DeliveryGroup,\n): deliveryGroup is DeferredFragmentRecord {\n  return deliveryGroup instanceof DeferredFragmentRecord;\n}\n\nexport interface StreamItemResult {\n  item?: unknown;\n  incrementalDataRecords?: ReadonlyArray<IncrementalDataRecord> | undefined;\n  errors?: ReadonlyArray<GraphQLError> | undefined;\n}\n\nexport type StreamItemRecord = ThunkIncrementalResult<StreamItemResult>;\n\nexport interface StreamRecord {\n  path: Path;\n  label: string | undefined;\n  id?: string | undefined;\n  streamItemQueue: Array<StreamItemRecord>;\n}\n\nexport interface StreamItemsResult {\n  streamRecord: StreamRecord;\n  errors?: ReadonlyArray<GraphQLError>;\n  result?: StreamItemsRecordResult;\n  incrementalDataRecords?: ReadonlyArray<IncrementalDataRecord> | undefined;\n}\n\nexport interface CancellableStreamRecord extends StreamRecord {\n  earlyReturn: () => Promise<unknown>;\n}\n\nexport function isCancellableStreamRecord(\n  deliveryGroup: DeliveryGroup,\n): deliveryGroup is CancellableStreamRecord {\n  return 'earlyReturn' in deliveryGroup;\n}\n\nexport type IncrementalDataRecord = PendingExecutionGroup | StreamRecord;\n\nexport type IncrementalDataRecordResult =\n  | CompletedExecutionGroup\n  | StreamItemsResult;\n"]}