{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../src/graphql.ts"],"names":[],"mappings":";;AAyEA,0BAGC;AAQD,kCASC;AA7FD,yDAAmD;AAInD,oDAA6C;AAQ7C,oDAAoD;AAEpD,0DAAoD;AAEpD,uDAAiD;AAyDjD,SAAgB,OAAO,CAAC,IAAiB;IACvC,gDAAgD;IAChD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;GAKG;AACH,SAAgB,WAAW,CAAC,IAAiB;IAC3C,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IAEjC,6CAA6C;IAC7C,IAAI,IAAA,wBAAS,EAAC,MAAM,CAAC,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;IACzE,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,WAAW,CAAC,IAAiB;IACpC,MAAM,EACJ,MAAM,EACN,MAAM,EACN,SAAS,EACT,YAAY,EACZ,cAAc,EACd,aAAa,EACb,aAAa,EACb,YAAY,EACZ,eAAe,GAChB,GAAG,IAAI,CAAC;IAET,kBAAkB;IAClB,MAAM,sBAAsB,GAAG,IAAA,4BAAc,EAAC,MAAM,CAAC,CAAC;IACtD,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACtC,OAAO,EAAE,MAAM,EAAE,sBAAsB,EAAE,CAAC;IAC5C,CAAC;IAED,QAAQ;IACR,IAAI,QAAQ,CAAC;IACb,IAAI,CAAC;QACH,QAAQ,GAAG,IAAA,iBAAK,EAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAAC,OAAO,WAAW,EAAE,CAAC;QACrB,OAAO,EAAE,MAAM,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC;IACnC,CAAC;IAED,WAAW;IACX,MAAM,gBAAgB,GAAG,IAAA,sBAAQ,EAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE;QAC7D,eAAe;KAChB,CAAC,CAAC;IACH,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAChC,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC;IACtC,CAAC;IAED,UAAU;IACV,OAAO,IAAA,oBAAO,EAAC;QACb,MAAM;QACN,QAAQ;QACR,SAAS;QACT,YAAY;QACZ,cAAc;QACd,aAAa;QACb,aAAa;QACb,YAAY;QACZ,eAAe;KAChB,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { isPromise } from './jsutils/isPromise.js';\nimport type { Maybe } from './jsutils/Maybe.js';\nimport type { PromiseOrValue } from './jsutils/PromiseOrValue.js';\n\nimport { parse } from './language/parser.js';\nimport type { Source } from './language/source.js';\n\nimport type {\n  GraphQLFieldResolver,\n  GraphQLTypeResolver,\n} from './type/definition.js';\nimport type { GraphQLSchema } from './type/schema.js';\nimport { validateSchema } from './type/validate.js';\n\nimport { validate } from './validation/validate.js';\n\nimport { execute } from './execution/execute.js';\nimport type { ExecutionResult } from './execution/types.js';\n\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * This function does not support incremental delivery (`@defer` and `@stream`).\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * contextValue:\n *    The context value is provided as an argument to resolver functions after\n *    field arguments. It is used to pass shared information useful at any point\n *    during executing this query, for example the currently logged in user and\n *    connections to databases or other services.\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n * typeResolver:\n *    A type resolver function to use when none is provided by the schema.\n *    If not provided, the default type resolver is used (which looks for a\n *    `__typename` field or alternatively calls the `isTypeOf` method).\n */\nexport interface GraphQLArgs {\n  schema: GraphQLSchema;\n  source: string | Source;\n  hideSuggestions?: Maybe<boolean>;\n  rootValue?: unknown;\n  contextValue?: unknown;\n  variableValues?: Maybe<{ readonly [variable: string]: unknown }>;\n  operationName?: Maybe<string>;\n  fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;\n  typeResolver?: Maybe<GraphQLTypeResolver<any, any>>;\n  abortSignal?: Maybe<AbortSignal>;\n}\n\nexport function graphql(args: GraphQLArgs): Promise<ExecutionResult> {\n  // Always return a Promise for a consistent API.\n  return new Promise((resolve) => resolve(graphqlImpl(args)));\n}\n\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\nexport function graphqlSync(args: GraphQLArgs): ExecutionResult {\n  const result = graphqlImpl(args);\n\n  // Assert that the execution was synchronous.\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args: GraphQLArgs): PromiseOrValue<ExecutionResult> {\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    hideSuggestions,\n  } = args;\n\n  // Validate Schema\n  const schemaValidationErrors = validateSchema(schema);\n  if (schemaValidationErrors.length > 0) {\n    return { errors: schemaValidationErrors };\n  }\n\n  // Parse\n  let document;\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return { errors: [syntaxError] };\n  }\n\n  // Validate\n  const validationErrors = validate(schema, document, undefined, {\n    hideSuggestions,\n  });\n  if (validationErrors.length > 0) {\n    return { errors: validationErrors };\n  }\n\n  // Execute\n  return execute({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    hideSuggestions,\n  });\n}\n"]}