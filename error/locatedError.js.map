{"version":3,"file":"locatedError.js","sourceRoot":"","sources":["../../src/error/locatedError.ts"],"names":[],"mappings":";;AAYA,oCAmBC;AA9BD,sDAAgD;AAIhD,uDAAiD;AAEjD;;;;GAIG;AACH,SAAgB,YAAY,CAC1B,gBAAyB,EACzB,KAA0D,EAC1D,IAA4C;IAE5C,MAAM,aAAa,GAAG,IAAA,oBAAO,EAAC,gBAAgB,CAAC,CAAC;IAEhD,2FAA2F;IAC3F,IAAI,qBAAqB,CAAC,aAAa,CAAC,EAAE,CAAC;QACzC,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,OAAO,IAAI,8BAAY,CAAC,aAAa,CAAC,OAAO,EAAE;QAC7C,KAAK,EAAG,aAA8B,CAAC,KAAK,IAAI,KAAK;QACrD,MAAM,EAAG,aAA8B,CAAC,MAAM;QAC9C,SAAS,EAAG,aAA8B,CAAC,SAAS;QACpD,IAAI;QACJ,aAAa;KACd,CAAC,CAAC;AACL,CAAC;AAED,SAAS,qBAAqB,CAAC,KAAU;IACvC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import type { Maybe } from '../jsutils/Maybe.js';\nimport { toError } from '../jsutils/toError.js';\n\nimport type { ASTNode } from '../language/ast.js';\n\nimport { GraphQLError } from './GraphQLError.js';\n\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nexport function locatedError(\n  rawOriginalError: unknown,\n  nodes: ASTNode | ReadonlyArray<ASTNode> | undefined | null,\n  path?: Maybe<ReadonlyArray<string | number>>,\n): GraphQLError {\n  const originalError = toError(rawOriginalError);\n\n  // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes: (originalError as GraphQLError).nodes ?? nodes,\n    source: (originalError as GraphQLError).source,\n    positions: (originalError as GraphQLError).positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error: any): error is GraphQLError {\n  return Array.isArray(error.path);\n}\n"]}