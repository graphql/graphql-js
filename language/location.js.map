{"version":3,"file":"location.js","sourceRoot":"","sources":["../../src/language/location.ts"],"names":[],"mappings":";;AAkBA,kCAcC;AAhCD,0DAAoD;AAIpD,MAAM,UAAU,GAAG,cAAc,CAAC;AAUlC;;;GAGG;AACH,SAAgB,WAAW,CAAC,MAAc,EAAE,QAAgB;IAC1D,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,IAAI,IAAI,GAAG,CAAC,CAAC;IAEb,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;QACrD,CAAU,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,SAAzC,wBAAS,SAAkC;QAC3C,IAAI,KAAK,CAAC,KAAK,IAAI,QAAQ,EAAE,CAAC;YAC5B,MAAM;QACR,CAAC;QACD,aAAa,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC9C,IAAI,IAAI,CAAC,CAAC;IACZ,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,GAAG,CAAC,GAAG,aAAa,EAAE,CAAC;AACxD,CAAC","sourcesContent":["import { invariant } from '../jsutils/invariant.js';\n\nimport type { Source } from './source.js';\n\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n\n/**\n * Represents a location in a Source.\n */\nexport interface SourceLocation {\n  readonly line: number;\n  readonly column: number;\n}\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source: Source, position: number): SourceLocation {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    invariant(typeof match.index === 'number');\n    if (match.index >= position) {\n      break;\n    }\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return { line, column: position + 1 - lastLineStart };\n}\n"]}